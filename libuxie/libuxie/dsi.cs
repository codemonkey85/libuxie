using System;
using System.Runtime.InteropServices;

namespace LibUxie.DSI {
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    struct Footer {
        public ushort sectionId;
        public ushort checksum;
        public uint mark;
        public uint saveIndex;
    }
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    struct Item {
        public ushort index;
        public ushort amount;
    }
    public enum Version {
        Unknown,
        BlackWhite,
        Black2White2,
    };
    public enum SaveSlot {
        Main,
        Backup
    }
    public enum SavBlocks {
        BOX_NAMES,
        BOX_1,
        BOX_2,
        BOX_3,
        BOX_4,
        BOX_5,
        BOX_6,
        BOX_7,
        BOX_8,
        BOX_9,
        BOX_10,
        BOX_11,
        BOX_12,
        BOX_13,
        BOX_14,
        BOX_15,
        BOX_16,
        BOX_17,
        BOX_18,
        BOX_19,
        BOX_20,
        BOX_21,
        BOX_22,
        BOX_23,
        BOX_24,
        INVENTORY,
        PARTY_POKEMON,
        TRAINER_DATA,
        BLOCK_27,
        BLOCK_28,
        BLOCK_29,
        BLOCK_30,
        BLOCK_31,
        BLOCK_32,
        BLOCK_33,
        BLOCK_34,
        BLOCK_35,
        BLOCK_36,
        BLOCK_37,
        BLOCK_38,
        BLOCK_39,
        BLOCK_40,
        BLOCK_41,
        BLOCK_42,
        BLOCK_43,
        BLOCK_44,
        BLOCK_45,
        BLOCK_46,
        BLOCK_47,
        BLOCK_48,
        BLOCK_49,
        BLOCK_50,
        BLOCK_51,
        BLOCK_52,
        BLOCK_53,
        BLOCK_54,
        BLOCK_55,
        BLOCK_56,
        BLOCK_57,
        BLOCK_58,
        BLOCK_59,
        BLOCK_60,
        BLOCK_61,
        BLOCK_62,
        BLOCK_63,
        BLOCK_64,
        BLOCK_65,
        BLOCK_66,
        BLOCK_67,
        BLOCK_68,
        BLOCK_69,
        BLOCK_70,
        BLOCK_71,
    }
    public class Save {
        private const int BLOCK_START = 0;
        private const int BLOCK_LENGTH = 1;
        private const int BLOCK_SUM = 2;
        private static readonly int[,] BlackWhiteBlockLengthsSums = new int[,]
        {
            {0x00000,0x3E0,0x003E2},
{0x00400,0xFF0,0x013F2},
{0x01400,0xFF0,0x023F2},
{0x02400,0xFF0,0x033F2},
{0x03400,0xFF0,0x043F2},
{0x04400,0xFF0,0x053F2},
{0x05400,0xFF0,0x063F2},
{0x06400,0xFF0,0x073F2},
{0x07400,0xFF0,0x083F2},
{0x08400,0xFF0,0x093F2},
{0x09400,0xFF0,0x0A3F2},
{0x0A400,0xFF0,0x0B3F2},
{0x0B400,0xFF0,0x0C3F2},
{0x0C400,0xFF0,0x0D3F2},
{0x0D400,0xFF0,0x0E3F2},
{0x0E400,0xFF0,0x0F3F2},
{0x0F400,0xFF0,0x103F2},
{0x10400,0xFF0,0x113F2},
{0x11400,0xFF0,0x123F2},
{0x12400,0xFF0,0x133F2},
{0x13400,0xFF0,0x143F2},
{0x14400,0xFF0,0x153F2},
{0x15400,0xFF0,0x163F2},
{0x16400,0xFF0,0x173F2},
{0x17400,0xFF0,0x183F2},
{0x18400,0x9C0,0x18DC2},
{0x18E00,0x534,0x19336},
{0x19400,0x68,0x1946A},
{0x19500,0x9C,0x1959E},
{0x19600,0x1338,0x1A93A},
{0x1AA00,0x7C4,0x1B1C6},
{0x1B200,0xD54,0x1BF56},
{0x1C000,0x2C,0x1C02E},
{0x1C100,0x658,0x1C75A},
{0x1C800,0xA94,0x1D296},
{0x1D300,0x1AC,0x1D4AE},
{0x1D500,0x3EC,0x1D8EE},
{0x1D900,0x5C,0x1D95E},
{0x1DA00,0x1E0,0x1DBE2},
{0x1DC00,0xA8,0x1DCAA},
{0x1DD00,0x460,0x1E162},
{0x1E200,0x1400,0x1F602},
{0x1F700,0x2A4,0x1F9A6},
{0x1FA00,0x2DC,0x1FCDE},
{0x1FD00,0x34C,0x2004E},
{0x20100,0x3EC,0x204EE},
{0x20500,0xF8,0x205FA},
{0x20600,0x2FC,0x208FE},
{0x20900,0x94,0x20996},
{0x20A00,0x35C,0x20D5E},
{0x20E00,0x1CC,0x20FCE},
{0x21000,0x168,0x2116A},
{0x21200,0xEC,0x212EE},
{0x21300,0x1B0,0x214B2},
{0x21500,0x1C,0x2151E},
{0x21600,0x4D4,0x21AD6},
{0x21B00,0x34,0x21B36},
{0x21C00,0x3C,0x21C3E},
{0x21D00,0x1AC,0x21EAE},
{0x21F00,0xB90,0x22A92},
{0x22B00,0x9C,0x22B9E},
{0x22C00,0x850,0x23452},
{0x23500,0x28,0x2352A},
{0x23600,0x284,0x23886},
{0x23900,0x10,0x23912},
{0x23A00,0x5C,0x23A5E},
{0x23B00,0x16C,0x23C6E},
{0x23D00,0x40,0x23D42},
{0x23E00,0xFC,0x23EFE}
        };
        private static readonly int[,] Black2White2BlockLengthsSums = new int[,]
        {
            {0x00000,0x3E0,0x003E2},
{0x00400,0xFF0,0x013F2},
{0x01400,0xFF0,0x023F2},
{0x02400,0xFF0,0x033F2},
{0x03400,0xFF0,0x043F2},
{0x04400,0xFF0,0x053F2},
{0x05400,0xFF0,0x063F2},
{0x06400,0xFF0,0x073F2},
{0x07400,0xFF0,0x083F2},
{0x08400,0xFF0,0x093F2},
{0x09400,0xFF0,0x0A3F2},
{0x0A400,0xFF0,0x0B3F2},
{0x0B400,0xFF0,0x0C3F2},
{0x0C400,0xFF0,0x0D3F2},
{0x0D400,0xFF0,0x0E3F2},
{0x0E400,0xFF0,0x0F3F2},
{0x0F400,0xFF0,0x103F2},
{0x10400,0xFF0,0x113F2},
{0x11400,0xFF0,0x123F2},
{0x12400,0xFF0,0x133F2},
{0x13400,0xFF0,0x143F2},
{0x14400,0xFF0,0x153F2},
{0x15400,0xFF0,0x163F2},
{0x16400,0xFF0,0x173F2},
{0x17400,0xFF0,0x183F2},
{0x18400,0x9EC,0x18DEE},
{0x18E00,0x534,0x19336},
{0x19400,0xB0,0x194B2},
{0x19500,0xA8,0x195AA},
{0x19600,0x1338,0x1A93A},
{0x1AA00,0x7C4,0x1B1C6},
{0x1B200,0xD54,0x1BF56},
{0x1C000,0x94,0x1C096},
{0x1C100,0x658,0x1C75A},
{0x1C800,0xA94,0x1D296},
{0x1D300,0x1AC,0x1D4AE},
{0x1D500,0x3EC,0x1D8EE},
{0x1D900,0x5C,0x1D95E},
{0x1DA00,0x1E0,0x1DBE2},
{0x1DC00,0xA8,0x1DCAA},
{0x1DD00,0x460,0x1E162},
{0x1E200,0x1400,0x1F602},
{0x1F700,0x2A4,0x1F9A6},
{0x1FA00,0xE0,0x1FAE2},
{0x1FB00,0x34C,0x1FE4E},
{0x1FF00,0x4E0,0x203E2},
{0x20400,0xF8,0x204FA},
{0x20500,0x2FC,0x207FE},
{0x20800,0x94,0x20896},
{0x20900,0x35C,0x20C5E},
{0x20D00,0x1D4,0x20ED6},
{0x20F00,0x1E0,0x210E2},
{0x21100,0xF0,0x211F2},
{0x21200,0x1B4,0x213B6},
{0x21400,0x4DC,0x218DE},
{0x21900,0x34,0x21936},
{0x21A00,0x3C,0x21A3E},
{0x21B00,0x1AC,0x21CAE},
{0x21D00,0xB90,0x22892},
{0x22900,0xAC,0x229AE},
{0x22A00,0x850,0x23252},
{0x23300,0x284,0x23586},
{0x23600,0x10,0x23612},
{0x23700,0xA8,0x237AA},
{0x23800,0x16C,0x2396E},
{0x23A00,0x80,0x23A82},
{0x23B00,0xFC,0x23BFE},
{0x23C00,0x16A8,0x252AA},
{0x25300,0x498,0x2579A},
        };
        private static readonly int[] SeedTable = new int[]
			{
				0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
				0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
				0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
				0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
				0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
				0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
				0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
				0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
				0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
				0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
				0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
				0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
				0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
				0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
				0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
				0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
				0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
				0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
				0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
				0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
				0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
				0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
				0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
				0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
				0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
				0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
				0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
				0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
				0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
				0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
				0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
				0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
			};
        private UInt16 CalcBlockChecksum(int BlockStart, int BlockLength) {
            int sum = 0xFFFF;
            for (int i = BlockStart; i < BlockStart + BlockLength; i++) {
                sum = (sum << 8) ^ SeedTable[(byte)(savdata[i] ^ (byte)(sum >> 8))];
            }
            return (ushort)sum;
        }
        public UInt16 CalcBlockChecksum(int block) {
            switch (Version) {
                case DSI.Version.BlackWhite:
                    return CalcBlockChecksum(BlackWhiteBlockLengthsSums[block, BLOCK_START], BlackWhiteBlockLengthsSums[block, BLOCK_LENGTH]);
                case DSI.Version.Black2White2:
                    return CalcBlockChecksum(Black2White2BlockLengthsSums[block, BLOCK_START], Black2White2BlockLengthsSums[block, BLOCK_LENGTH]);
                default:
                    return 0;
            }
        }
        public UInt16 CalcBlockChecksum(SavBlocks block) {
            return CalcBlockChecksum((int)block);
        }
        public UInt16 CalcBlockChecksum(int block, Version version) {
            switch (version) {
                case DSI.Version.BlackWhite:
                    return CalcBlockChecksum(BlackWhiteBlockLengthsSums[block, BLOCK_START], BlackWhiteBlockLengthsSums[block, BLOCK_LENGTH]);
                case DSI.Version.Black2White2:
                    return CalcBlockChecksum(Black2White2BlockLengthsSums[block, BLOCK_START], Black2White2BlockLengthsSums[block, BLOCK_LENGTH]);
                default:
                    return 0;
            }
        }
        public UInt16 CalcBlockChecksum(SavBlocks block, Version version) {
            return CalcBlockChecksum((int)block, version);
        }
        public UInt16 GetBlockChecksum(int block, Version version) {
            switch (version) {
                case DSI.Version.BlackWhite:
                    return BitConverter.ToUInt16(savdata, BlackWhiteBlockLengthsSums[block, BLOCK_SUM]);
                case DSI.Version.Black2White2:
                    return BitConverter.ToUInt16(savdata, Black2White2BlockLengthsSums[block, BLOCK_SUM]);
                default:
                    return 0;
            }
        }
        public UInt16 GetBlockChecksum(int block) {
            switch (Version) {
                case DSI.Version.BlackWhite:
                    return BitConverter.ToUInt16(savdata, BlackWhiteBlockLengthsSums[block, BLOCK_SUM]);
                case DSI.Version.Black2White2:
                    return BitConverter.ToUInt16(savdata, Black2White2BlockLengthsSums[block, BLOCK_SUM]);
                default:
                    return 0;
            }
        }

        private const int SAV_SIZE = 0x80000;

        private Version type;
        private byte[] savdata;

        private unsafe bool IsValid(byte[] data) {
            if (data.Length != SAV_SIZE) {
                return false;
            }
            return true;
        }

        private Version DetectVersion() {
            const int blockstart = 25;
            const int blockstop = 69;
            bool isverified = true;

            for (int block = blockstart; block < blockstop; block++) {
                isverified = (GetBlockChecksum(block, DSI.Version.BlackWhite) == CalcBlockChecksum(block, DSI.Version.BlackWhite));
            }
            if (isverified) {
                return Version.BlackWhite;
            }

            isverified = true;

            for (int block = blockstart; block < blockstop; block++) {
                isverified = (GetBlockChecksum(block, DSI.Version.Black2White2) == CalcBlockChecksum(block, DSI.Version.Black2White2));
            }
            if (isverified) {
                return Version.Black2White2;
            }

            return Version.Unknown;
        }

        public bool Load(byte[] data) {
            try {
                if (!IsValid(data)) {
                    type = Version.Unknown;
                    return false;
                }
                savdata = data;
                type = DetectVersion();
                return true;
            }
            catch (Exception) {
                // Do better error handling
                return false;
            }
        }

        public Version Version {
            get {
                return type;
            }
            set {
                type = value;
            }
        }
    }
}
